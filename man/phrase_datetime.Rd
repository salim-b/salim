% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/salim.gen.R
\name{phrase_datetime}
\alias{phrase_datetime}
\title{Phrase date(time)s}
\usage{
phrase_datetime(x, format = "date_long", locale = funky::config_val("locale"))
}
\arguments{
\item{x}{Date(s) or datetime(s) to format. A \link[base:Dates]{date}, \link[base:DateTimeClasses]{datetime}, factor or character vector.}

\item{format}{Format string(s) defining how to phrase \code{x}. Possible values include
\code{"date_short"}, \code{"date_medium"}, \code{"date_long"}, \code{"date_full"}, \code{"time_short"}, \code{"time_medium"}, \code{"time_long"} and \code{"time_full"}.
See \code{\link[stringi:stri_datetime_format]{stringi::stri_datetime_format()}} for details.}

\item{locale}{\code{NULL} or \code{''} for the default locale,
or a single string with locale identifier; a non-Gregorian calendar
may be specified by setting the \code{@calendar=name} keyword}
}
\value{
A character vector of the same length as \code{x}.
}
\description{
Formats date(time)s as strings according to the specified \code{format}s and \code{locale}, applying some typographic tweaks. A convenience wrapper around
\code{\link[stringi:stri_datetime_format]{stringi::stri_datetime_format()}}.
}
\examples{
salim::phrase_datetime("2020-02-20")

salim::phrase_datetime(x = as.POSIXct(0L),
                       format = c("date_full",
                                  "time_full"),
                       locale = "de-CH")

# note that character input is internally converted to a datetime using `as.POSIXct()` with the
# default `format` which ignores possible time components:
salim::phrase_datetime(x = "2020-02-20T13:13:13Z",
                       format = c("date_full",
                                  "time_full"))

# hence it's recommended to directly provide input as datetimes:
salim::phrase_datetime(x = clock::date_time_parse_RFC_3339("2020-02-20T13:13:13Z"),
                       format = c("date_full",
                                  "time_full"))
}
\seealso{
Other spoken language functions:
\code{\link{add_definite_article_de}()},
\code{\link{decline_noun_de}()},
\code{\link{definite_article_de}()},
\code{\link{definite_article_de_declined}()},
\code{\link{n_ify}()},
\code{\link{rank_nr}()},
\code{\link{write_out_n}()}
}
\concept{spoken}
